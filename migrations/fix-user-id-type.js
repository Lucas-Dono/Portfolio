/**
 * Migraci√≥n: Cambiar tipo de ID de usuarios de UUID a VARCHAR para permitir IDs de proveedores OAuth
 */

import { sequelize } from '../config/database.js';
import { QueryTypes } from 'sequelize';

export async function up() {
    try {
        console.log('üîÑ Iniciando migraci√≥n para cambiar tipo de ID de usuario...');

        // Verificar el tipo actual de la columna ID
        const checkColumns = await sequelize.query(
            `SELECT data_type 
       FROM information_schema.columns 
       WHERE table_name = 'users' 
       AND column_name = 'id'`,
            { type: QueryTypes.SELECT }
        );

        if (checkColumns.length > 0 && checkColumns[0].data_type === 'uuid') {
            console.log('üîç Encontrada columna ID de tipo UUID, cambiando a VARCHAR(255)...');

            // Primero eliminar la restricci√≥n de clave primaria
            await sequelize.query(`
        ALTER TABLE users 
        DROP CONSTRAINT users_pkey;
      `);
            console.log('‚úÖ Restricci√≥n de clave primaria eliminada');

            // Luego cambiar el tipo de la columna
            await sequelize.query(`
        ALTER TABLE users 
        ALTER COLUMN id TYPE VARCHAR(255);
      `);
            console.log('‚úÖ Tipo de columna ID cambiado a VARCHAR(255)');

            // Recrear la restricci√≥n de clave primaria
            await sequelize.query(`
        ALTER TABLE users 
        ADD PRIMARY KEY (id);
      `);
            console.log('‚úÖ Restricci√≥n de clave primaria recreada');
        } else {
            console.log('‚ö†Ô∏è La columna ID ya no es de tipo UUID o no se encontr√≥');
        }

        // Eliminar columnas duplicadas
        console.log('üîç Verificando columnas duplicadas...');
        const duplicateColumns = [
            { original: 'twoFactorSecret', duplicate: 'two_factor_secret' },
            { original: 'backupCodes', duplicate: 'backup_codes' },
            { original: 'lastTwoFactorAuth', duplicate: 'last_two_factor_auth' },
            { original: 'twoFactorEnabled', duplicate: 'two_factor_enabled' },
            { original: 'twoFactorVerified', duplicate: 'two_factor_verified' }
        ];

        for (const col of duplicateColumns) {
            try {
                await sequelize.query(`
          ALTER TABLE users 
          DROP COLUMN IF EXISTS ${col.duplicate};
        `);
                console.log(`‚úÖ Columna duplicada ${col.duplicate} eliminada`);
            } catch (err) {
                console.warn(`‚ö†Ô∏è Error al eliminar columna ${col.duplicate}: ${err.message}`);
            }
        }

        console.log('‚úÖ Migraci√≥n para cambiar tipo de ID completada');
    } catch (error) {
        console.error('‚ùå Error en migraci√≥n:', error);
        throw error;
    }
}

export async function down() {
    try {
        // En este caso, no proporcionamos un rollback para cambiar de VARCHAR a UUID
        // ya que podr√≠a causar p√©rdida de datos si hay IDs que no son UUID v√°lidos
        console.log('‚ö†Ô∏è No se puede revertir esta migraci√≥n autom√°ticamente');
    } catch (error) {
        console.error('‚ùå Error al revertir migraci√≥n:', error);
        throw error;
    }
}

export default { up, down }; 