version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_URL=${VITE_API_URL}
        - VITE_GOOGLE_CLIENT_ID=${VITE_GOOGLE_CLIENT_ID}
        - VITE_GITHUB_CLIENT_ID=${VITE_GITHUB_CLIENT_ID}
    restart: unless-stopped
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    networks:
      - portfolio_internal
      - portfolio_frontend
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 1G
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5001/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - SETUID
      - SETGID

  postgres:
    image: postgres:14-alpine
    user: postgres
    restart: unless-stopped
    ports:
      - "127.0.0.1:5433:5432" # Bind solo a localhost
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=portfolio
    volumes:
      - portfolio_postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - portfolio_internal
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - FOWNER
      - SETGID
      - SETUID

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d:ro
      - ./nginx/certbot/conf:/etc/letsencrypt:ro
      - ./nginx/certbot/www:/var/www/certbot:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - portfolio_frontend
      - portfolio_internal
    healthcheck:
      test: [ "CMD", "nginx", "-t" ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - SETUID
      - SETGID
      - CHOWN

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - portfolio_frontend
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

networks:
  portfolio_internal:
    driver: bridge
  portfolio_frontend:
    driver: bridge

volumes:
  portfolio_postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/logs
  app_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/uploads
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/nginx_logs
