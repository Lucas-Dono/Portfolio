#!/bin/bash

# Script de Entorno de Desarrollo en Servidor
# Permite probar cambios sin reconstruir Docker

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}==================================${NC}"
echo -e "${BLUE}   Entorno de Desarrollo Servidor${NC}"
echo -e "${BLUE}==================================${NC}"

# Funci√≥n para mostrar logs
show_logs() {
    echo -e "${YELLOW}üìã Mostrando logs del servidor de desarrollo...${NC}"
    tail -f /tmp/dev-server.log
}

# Funci√≥n para detener el servidor de desarrollo
stop_dev() {
    echo -e "${YELLOW}üõë Deteniendo servidor de desarrollo...${NC}"
    pkill -f "node.*server.js" || true
    pkill -f "npm.*start" || true
    echo -e "${GREEN}‚úÖ Servidor de desarrollo detenido${NC}"
}

# Funci√≥n para iniciar el servidor de desarrollo
start_dev() {
    echo -e "${YELLOW}üöÄ Iniciando servidor de desarrollo...${NC}"
    
    # Verificar que PostgreSQL est√© corriendo en Docker
    if ! docker ps | grep -q postgres; then
        echo -e "${YELLOW}üì¶ Iniciando PostgreSQL en Docker...${NC}"
        docker-compose -f docker-compose-prod.yml up -d postgres
        sleep 10
    fi
    
    # Instalar dependencias si no existen
    if [ ! -d "node_modules" ]; then
        echo -e "${YELLOW}üì¶ Instalando dependencias...${NC}"
        npm install --legacy-peer-deps
    fi
    
    # Variables de entorno para desarrollo
    export NODE_ENV=development
    export PORT=5002
    export DATABASE_URL="postgres://postgres:postgres@localhost:5433/portfolio"
    export JWT_SECRET="dev-jwt-secret-key"
    export OPENAI_API_KEY="${OPENAI_API_KEY:-sk-test}"
    export GOOGLE_CLIENT_ID="${GOOGLE_CLIENT_ID:-test}"
    export GOOGLE_CLIENT_SECRET="${GOOGLE_CLIENT_SECRET:-test}"
    export GITHUB_CLIENT_ID="${GITHUB_CLIENT_ID:-test}"
    export GITHUB_CLIENT_SECRET="${GITHUB_CLIENT_SECRET:-test}"
    export MP_ACCESS_TOKEN="${MP_ACCESS_TOKEN:-test}"
    export MP_PUBLIC_KEY="${MP_PUBLIC_KEY:-test}"
    export GMAIL_USER="${GMAIL_USER:-test}"
    export GMAIL_PASS="${GMAIL_PASS:-test}"
    
    echo -e "${GREEN}üåç Variables de entorno configuradas para desarrollo${NC}"
    echo -e "${BLUE}üìç Puerto: ${PORT}${NC}"
    echo -e "${BLUE}üóÑÔ∏è  Base de datos: PostgreSQL en Docker (puerto 5433)${NC}"
    
    # Iniciar servidor en background
    nohup node server.js > /tmp/dev-server.log 2>&1 &
    DEV_PID=$!
    
    echo -e "${GREEN}‚úÖ Servidor de desarrollo iniciado (PID: ${DEV_PID})${NC}"
    echo -e "${BLUE}üåê URL local: http://localhost:5002${NC}"
    echo -e "${BLUE}üåê URL principal: https://circuitprompt.com.ar${NC}"
    echo -e "${YELLOW}‚ÑπÔ∏è  Nginx detectar√° autom√°ticamente el modo desarrollo${NC}"
    
    # Esperar un momento y verificar que est√© corriendo
    sleep 3
    if ps -p $DEV_PID > /dev/null; then
        echo -e "${GREEN}‚úÖ Servidor funcionando correctamente${NC}"
    else
        echo -e "${RED}‚ùå Error al iniciar el servidor. Ver logs:${NC}"
        tail -20 /tmp/dev-server.log
        return 1
    fi
}

# Funci√≥n para verificar estado
status_dev() {
    echo -e "${BLUE}üìä Estado del entorno de desarrollo:${NC}"
    
    # Verificar proceso Node.js
    if pgrep -f "node.*server.js" > /dev/null; then
        PID=$(pgrep -f "node.*server.js")
        echo -e "${GREEN}‚úÖ Servidor Node.js corriendo (PID: ${PID})${NC}"
        echo -e "${BLUE}üåê Puerto: 5002${NC}"
    else
        echo -e "${RED}‚ùå Servidor Node.js no est√° corriendo${NC}"
    fi
    
    # Verificar PostgreSQL
    if docker ps | grep -q postgres; then
        echo -e "${GREEN}‚úÖ PostgreSQL corriendo en Docker${NC}"
    else
        echo -e "${RED}‚ùå PostgreSQL no est√° corriendo${NC}"
    fi
    
    # Verificar conectividad
    if curl -s http://localhost:5002/health > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Servidor respondiendo correctamente${NC}"
    else
        echo -e "${RED}‚ùå Servidor no responde en puerto 5002${NC}"
    fi
}

# Funci√≥n para reiniciar r√°pido
restart_dev() {
    echo -e "${YELLOW}üîÑ Reinicio r√°pido del servidor...${NC}"
    stop_dev
    sleep 2
    start_dev
}

# Funci√≥n para aplicar cambios sin reinicio
reload_dev() {
    echo -e "${YELLOW}üîÑ Recargando c√≥digo (sin reinicio)...${NC}"
    if pgrep -f "node.*server.js" > /dev/null; then
        PID=$(pgrep -f "node.*server.js")
        kill -USR2 $PID 2>/dev/null || restart_dev
        echo -e "${GREEN}‚úÖ C√≥digo recargado${NC}"
    else
        echo -e "${RED}‚ùå Servidor no est√° corriendo. Iniciando...${NC}"
        start_dev
    fi
}

# Men√∫ principal
case "${1:-menu}" in
    start)
        start_dev
        ;;
    stop)
        stop_dev
        ;;
    restart)
        restart_dev
        ;;
    reload)
        reload_dev
        ;;
    status)
        status_dev
        ;;
    logs)
        show_logs
        ;;
    menu)
        echo "Opciones disponibles:"
        echo "1. Iniciar servidor de desarrollo"
        echo "2. Detener servidor de desarrollo"
        echo "3. Reiniciar servidor"
        echo "4. Recargar c√≥digo"
        echo "5. Ver estado"
        echo "6. Ver logs"
        echo "7. Salir"
        echo ""
        read -p "Selecciona una opci√≥n (1-7): " choice
        
        case $choice in
            1) start_dev ;;
            2) stop_dev ;;
            3) restart_dev ;;
            4) reload_dev ;;
            5) status_dev ;;
            6) show_logs ;;
            7) echo -e "${GREEN}üëã ¬°Hasta luego!${NC}"; exit 0 ;;
            *) echo -e "${RED}‚ùå Opci√≥n inv√°lida${NC}"; exit 1 ;;
        esac
        ;;
    *)
        echo "Uso: $0 {start|stop|restart|reload|status|logs|menu}"
        echo ""
        echo "Comandos:"
        echo "  start   - Iniciar servidor de desarrollo"
        echo "  stop    - Detener servidor de desarrollo"
        echo "  restart - Reiniciar servidor"
        echo "  reload  - Recargar c√≥digo sin reinicio"
        echo "  status  - Ver estado del servidor"
        echo "  logs    - Ver logs en tiempo real"
        echo "  menu    - Mostrar men√∫ interactivo"
        exit 1
        ;;
esac 