# Etapa de construcción
FROM node:20-alpine AS builder

# Instalar dependencias necesarias para compilación
RUN apk add --no-cache python3 make g++

WORKDIR /app

# Copiar primero los archivos de configuración para aprovechar la caché de Docker
COPY package*.json ./
COPY tsconfig*.json ./
COPY .npmrc ./
COPY eslint.config.js ./

# Instalar TODAS las dependencias, incluyendo las de desarrollo necesarias para compilar
RUN npm install --legacy-peer-deps

# Copiar archivos de configuración de Vite y otros archivos necesarios
COPY index.html ./
COPY vite.config.ts ./
COPY .env* ./
COPY public/ ./public/

# Copiar solo los archivos necesarios para la compilación
COPY src/ ./src/
COPY routes/ ./routes/
COPY controllers/ ./controllers/
COPY models/ ./models/
COPY config/ ./config/
COPY utils/ ./utils/
COPY templates/ ./templates/
COPY migrations/ ./migrations/
COPY security/ ./security/
COPY server.js ./
COPY init-db.sql ./

# Asegurarse de que todos los archivos estén en su lugar
RUN ls -la && \
    echo "Verificando archivos críticos:" && \
    [ -f "index.html" ] && echo "✓ index.html presente" || echo "✗ index.html faltante" && \
    [ -f "vite.config.ts" ] && echo "✓ vite.config.ts presente" || echo "✗ vite.config.ts faltante" && \
    [ -f "package.json" ] && echo "✓ package.json presente" || echo "✗ package.json faltante" && \
    [ -f "tsconfig.json" ] && echo "✓ tsconfig.json presente" || echo "✗ tsconfig.json faltante"

# Compilar la aplicación
RUN npm run build

# Etapa final con imagen mínima
FROM node:20-alpine

# Crear usuario sin privilegios para ejecutar la aplicación
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# Crear directorios necesarios y establecer permisos
RUN mkdir -p /app/logs /app/uploads && \
    chown -R appuser:appgroup /app

WORKDIR /app

# Copiar solo los archivos necesarios para producción
COPY --from=builder --chown=appuser:appgroup /app/dist ./dist
COPY --from=builder --chown=appuser:appgroup /app/node_modules ./node_modules
COPY --from=builder --chown=appuser:appgroup /app/package.json ./
COPY --from=builder --chown=appuser:appgroup /app/server.js ./
COPY --from=builder --chown=appuser:appgroup /app/init-db.sql ./

# Configurar variables de entorno para producción
ENV NODE_ENV=production

# Exponer puertos
EXPOSE 5001

# Cambiar al usuario no privilegiado
USER appuser

# Configurar health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5001/health || exit 1

# Comando para iniciar la aplicación
CMD ["node", "dist/server.js"] 