#!/bin/bash

# Script Maestro de Gesti√≥n del Servidor CircuitPrompt
# Unifica desarrollo y producci√≥n con detecci√≥n autom√°tica

set -e

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Detectar el comando correcto de docker compose
if command -v docker-compose &> /dev/null; then
    DOCKER_COMPOSE="docker-compose"
elif command -v docker &> /dev/null && docker compose version &> /dev/null; then
    DOCKER_COMPOSE="docker compose"
else
    echo -e "${RED}‚ùå Error: No se encontr√≥ docker-compose o docker compose.${NC}"
    exit 1
fi

echo -e "${CYAN}========================================${NC}"
echo -e "${CYAN}   CircuitPrompt Server Manager${NC}"
echo -e "${CYAN}   URL Unificada: https://circuitprompt.com.ar${NC}"
echo -e "${CYAN}========================================${NC}"

# Funci√≥n para verificar si Docker est√° funcionando
verificar_docker() {
    if ! docker info &> /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è Docker no est√° funcionando correctamente.${NC}"
        echo -e "${BLUE}‚ÑπÔ∏è Sugerencia: Intenta iniciar Docker con sudo systemctl start docker${NC}"
        return 1
    fi
    return 0
}

# Funci√≥n para verificar estado de nginx
verificar_nginx() {
    echo -e "${BLUE}üîç Verificando estado de nginx...${NC}"
    
    if docker ps | grep -q nginx; then
        echo -e "${GREEN}‚úÖ Nginx corriendo en Docker${NC}"
        
        # Verificar configuraci√≥n
        if docker exec $(docker ps -q -f name=nginx) nginx -t &> /dev/null; then
            echo -e "${GREEN}‚úÖ Configuraci√≥n de nginx v√°lida${NC}"
        else
            echo -e "${RED}‚ùå Error en configuraci√≥n de nginx${NC}"
            return 1
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è Nginx no est√° corriendo${NC}"
        return 1
    fi
    
    return 0
}

# Funci√≥n para iniciar nginx si no est√° corriendo
iniciar_nginx() {
    echo -e "${BLUE}üöÄ Iniciando nginx...${NC}"
    
    # Crear directorios necesarios
    mkdir -p ./data/nginx_logs
    mkdir -p ./nginx/certbot/conf
    mkdir -p ./nginx/certbot/www
    
    # Iniciar solo nginx y certbot
    $DOCKER_COMPOSE --env-file .env.production -f docker-compose-prod.yml up -d nginx certbot
    
    sleep 5
    
    if verificar_nginx; then
        echo -e "${GREEN}‚úÖ Nginx iniciado correctamente${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Error al iniciar nginx${NC}"
        return 1
    fi
}

# Funci√≥n para modo producci√≥n
modo_produccion() {
    echo -e "${GREEN}üè≠ MODO PRODUCCI√ìN${NC}"
    echo -e "${BLUE}Iniciando entorno completo de producci√≥n...${NC}"
    
    verificar_docker || return 1
    
    # Detener cualquier servidor de desarrollo
    echo -e "${YELLOW}üõë Deteniendo servidores de desarrollo...${NC}"
    pkill -f "node.*server.js" || true
    
    # Detener contenedores existentes
    echo -e "${BLUE}üõë Deteniendo contenedores existentes...${NC}"
    $DOCKER_COMPOSE --env-file .env.production -f docker-compose-prod.yml down
    
    # Crear directorios necesarios
    mkdir -p ./data/nginx_logs ./data/logs ./data/uploads ./data/postgres
    
    # Iniciar producci√≥n completa
    echo -e "${BLUE}üöÄ Iniciando contenedores de producci√≥n...${NC}"
    export NODE_ENV=production
    export PORT=5001
    export DOCKER_BUILDKIT=1
    export COMPOSE_DOCKER_CLI_BUILD=1
    
    $DOCKER_COMPOSE --env-file .env.production -f docker-compose-prod.yml up -d --build
    
    # Esperar que los servicios est√©n listos
    echo -e "${BLUE}‚è≥ Esperando que los servicios est√©n listos...${NC}"
    sleep 15
    
    # Verificar estado
    if $DOCKER_COMPOSE -f docker-compose-prod.yml ps | grep -q "healthy\|running"; then
        echo -e "${GREEN}‚úÖ Modo producci√≥n activo${NC}"
        echo -e "${CYAN}üåê URL: https://circuitprompt.com.ar${NC}"
    else
        echo -e "${RED}‚ùå Error al iniciar producci√≥n${NC}"
        return 1
    fi
}

# Funci√≥n para modo desarrollo
modo_desarrollo() {
    echo -e "${YELLOW}üîß MODO DESARROLLO${NC}"
    echo -e "${BLUE}Iniciando entorno h√≠brido desarrollo...${NC}"
    
    verificar_docker || return 1
    
    # Detener contenedor de aplicaci√≥n de producci√≥n si existe
    echo -e "${YELLOW}üõë Deteniendo contenedor de aplicaci√≥n de producci√≥n...${NC}"
    docker stop $(docker ps -q -f name=app) 2>/dev/null || true
    
    # Asegurar que nginx est√© corriendo
    if ! verificar_nginx; then
        iniciar_nginx || return 1
    fi
    
    # Asegurar que PostgreSQL est√© corriendo
    if ! docker ps | grep -q postgres; then
        echo -e "${BLUE}üóÑÔ∏è Iniciando PostgreSQL...${NC}"
        $DOCKER_COMPOSE --env-file .env.production -f docker-compose-prod.yml up -d postgres
        sleep 10
    fi
    
    # Iniciar servidor de desarrollo
    echo -e "${BLUE}üöÄ Iniciando servidor de desarrollo en puerto 5002...${NC}"
    ./dev-server.sh start
    
    echo -e "${GREEN}‚úÖ Modo desarrollo activo${NC}"
    echo -e "${CYAN}üåê URL: https://circuitprompt.com.ar${NC}"
    echo -e "${YELLOW}‚ÑπÔ∏è  Nginx redirige autom√°ticamente al servidor de desarrollo${NC}"
}

# Funci√≥n para verificar estado
estado_servidor() {
    echo -e "${BLUE}üìä ESTADO DEL SERVIDOR${NC}"
    echo -e "${BLUE}=====================${NC}"
    
    # Verificar nginx
    if docker ps | grep -q nginx; then
        echo -e "${GREEN}‚úÖ Nginx: Activo${NC}"
    else
        echo -e "${RED}‚ùå Nginx: Inactivo${NC}"
    fi
    
    # Verificar PostgreSQL
    if docker ps | grep -q postgres; then
        echo -e "${GREEN}‚úÖ PostgreSQL: Activo${NC}"
    else
        echo -e "${RED}‚ùå PostgreSQL: Inactivo${NC}"
    fi
    
    # Verificar aplicaci√≥n de producci√≥n
    if docker ps | grep -q "app.*5001"; then
        echo -e "${GREEN}‚úÖ App Producci√≥n: Activa (puerto 5001)${NC}"
        MODO="PRODUCCI√ìN"
    else
        echo -e "${YELLOW}‚ö†Ô∏è App Producci√≥n: Inactiva${NC}"
    fi
    
    # Verificar servidor de desarrollo
    if pgrep -f "node.*server.js" > /dev/null; then
        echo -e "${GREEN}‚úÖ App Desarrollo: Activa (puerto 5002)${NC}"
        MODO="DESARROLLO"
    else
        echo -e "${YELLOW}‚ö†Ô∏è App Desarrollo: Inactiva${NC}"
    fi
    
    # Mostrar modo actual
    if [ ! -z "$MODO" ]; then
        echo -e "${CYAN}üéØ Modo actual: ${MODO}${NC}"
    else
        echo -e "${RED}‚ùå Ning√∫n servidor de aplicaci√≥n est√° activo${NC}"
    fi
    
    # Verificar conectividad
    echo -e "${BLUE}üåê Verificando conectividad...${NC}"
    if curl -s -k https://circuitprompt.com.ar/health > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Sitio web: Respondiendo correctamente${NC}"
    else
        echo -e "${RED}‚ùå Sitio web: No responde${NC}"
    fi
}

# Funci√≥n para detener todo
detener_todo() {
    echo -e "${RED}üõë DETENIENDO TODOS LOS SERVICIOS${NC}"
    
    # Detener servidor de desarrollo
    echo -e "${YELLOW}Deteniendo servidor de desarrollo...${NC}"
    pkill -f "node.*server.js" || true
    
    # Detener contenedores Docker
    echo -e "${YELLOW}Deteniendo contenedores Docker...${NC}"
    $DOCKER_COMPOSE --env-file .env.production -f docker-compose-prod.yml down
    
    echo -e "${GREEN}‚úÖ Todos los servicios detenidos${NC}"
}

# Funci√≥n para reiniciar nginx
reiniciar_nginx() {
    echo -e "${BLUE}üîÑ REINICIANDO NGINX${NC}"
    
    # Detener nginx
    docker stop $(docker ps -q -f name=nginx) 2>/dev/null || true
    
    # Esperar un momento
    sleep 2
    
    # Iniciar nginx
    iniciar_nginx
    
    echo -e "${GREEN}‚úÖ Nginx reiniciado${NC}"
}

# Funci√≥n para logs
ver_logs() {
    echo -e "${BLUE}üìã LOGS DEL SISTEMA${NC}"
    echo "Selecciona qu√© logs ver:"
    echo "1. Nginx"
    echo "2. Aplicaci√≥n (Producci√≥n)"
    echo "3. Servidor de desarrollo"
    echo "4. PostgreSQL"
    echo "5. Todos los contenedores"
    
    read -p "Opci√≥n (1-5): " log_choice
    
    case $log_choice in
        1) docker logs -f $(docker ps -q -f name=nginx) ;;
        2) docker logs -f $(docker ps -q -f name=app) ;;
        3) tail -f /tmp/dev-server.log ;;
        4) docker logs -f $(docker ps -q -f name=postgres) ;;
        5) docker logs -f $(docker ps -q) ;;
        *) echo -e "${RED}‚ùå Opci√≥n inv√°lida${NC}"; return 1 ;;
    esac
}

# Men√∫ principal
case "${1:-menu}" in
    prod|production)
        modo_produccion
        ;;
    dev|development)
        modo_desarrollo
        ;;
    status|estado)
        estado_servidor
        ;;
    stop|detener)
        detener_todo
        ;;
    restart-nginx)
        reiniciar_nginx
        ;;
    logs)
        ver_logs
        ;;
    menu)
        echo "Opciones disponibles:"
        echo "1. Modo Producci√≥n (completo)"
        echo "2. Modo Desarrollo (h√≠brido)"
        echo "3. Ver estado del servidor"
        echo "4. Detener todos los servicios"
        echo "5. Reiniciar nginx"
        echo "6. Ver logs"
        echo "7. Salir"
        echo ""
        read -p "Selecciona una opci√≥n (1-7): " choice
        
        case $choice in
            1) modo_produccion ;;
            2) modo_desarrollo ;;
            3) estado_servidor ;;
            4) detener_todo ;;
            5) reiniciar_nginx ;;
            6) ver_logs ;;
            7) echo -e "${GREEN}üëã ¬°Hasta luego!${NC}"; exit 0 ;;
            *) echo -e "${RED}‚ùå Opci√≥n inv√°lida${NC}"; exit 1 ;;
        esac
        ;;
    *)
        echo "Uso: $0 {prod|dev|status|stop|restart-nginx|logs|menu}"
        echo ""
        echo "Comandos:"
        echo "  prod          - Modo producci√≥n completo"
        echo "  dev           - Modo desarrollo h√≠brido"
        echo "  status        - Ver estado del servidor"
        echo "  stop          - Detener todos los servicios"
        echo "  restart-nginx - Reiniciar solo nginx"
        echo "  logs          - Ver logs del sistema"
        echo "  menu          - Mostrar men√∫ interactivo"
        echo ""
        echo -e "${CYAN}URL unificada: https://circuitprompt.com.ar${NC}"
        exit 1
        ;;
esac 