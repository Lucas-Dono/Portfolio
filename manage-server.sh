#!/bin/bash

# Script Maestro de Gesti√≥n del Servidor CircuitPrompt
# Unifica desarrollo y producci√≥n con detecci√≥n autom√°tica

set -e

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Detectar el comando correcto de docker compose
if command -v docker-compose &> /dev/null; then
    DOCKER_COMPOSE="docker-compose"
elif command -v docker &> /dev/null && docker compose version &> /dev/null; then
    DOCKER_COMPOSE="docker compose"
else
    echo -e "${RED}‚ùå Error: No se encontr√≥ docker-compose o docker compose.${NC}"
    exit 1
fi

echo -e "${CYAN}========================================${NC}"
echo -e "${CYAN}   CircuitPrompt Server Manager${NC}"
echo -e "${CYAN}   URL Unificada: https://circuitprompt.com.ar${NC}"
echo -e "${CYAN}========================================${NC}"

# Funci√≥n para verificar si Docker est√° funcionando
verificar_docker() {
    if ! docker info &> /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è Docker no est√° funcionando correctamente.${NC}"
        echo -e "${BLUE}‚ÑπÔ∏è Sugerencia: Intenta iniciar Docker con sudo systemctl start docker${NC}"
        return 1
    fi
    return 0
}

# Funci√≥n para verificar y liberar puertos (basada en docker-prod.sh)
verificar_puertos() {
    echo -e "${BLUE}üîç Verificando puertos necesarios...${NC}"
    
    # Array de puertos a verificar seg√∫n el modo
    local puertos_a_verificar=()
    
    case "$1" in
        "dev")
            puertos_a_verificar=(5002 5433)
            ;;
        "prod")
            puertos_a_verificar=(5001 5433)
            ;;
        *)
            puertos_a_verificar=(5001 5002 5433)
            ;;
    esac
    
    for puerto in "${puertos_a_verificar[@]}"; do
        if lsof -i :$puerto > /dev/null 2>&1; then
            echo -e "${YELLOW}‚ö†Ô∏è El puerto $puerto est√° en uso. Intentando liberarlo...${NC}"
            
            # Obtener el PID del proceso que usa el puerto
            PID=$(lsof -ti :$puerto 2>/dev/null)
            
            if [ ! -z "$PID" ]; then
                # Obtener informaci√≥n del proceso
                PROCESO=$(ps -p $PID -o comm= 2>/dev/null || echo "proceso desconocido")
                echo -e "${BLUE}üîÑ Deteniendo proceso $PID ($PROCESO) que usa el puerto $puerto${NC}"
                
                # Intentar terminar gracefully primero
                kill -TERM $PID 2>/dev/null || true
                sleep 3
                
                # Si a√∫n est√° corriendo, forzar terminaci√≥n
                if kill -0 $PID 2>/dev/null; then
                    echo -e "${YELLOW}‚ö†Ô∏è Proceso $PID no respondi√≥ a SIGTERM, usando SIGKILL...${NC}"
                    kill -9 $PID 2>/dev/null || true
                    sleep 2
                fi
                
                # Verificar si el puerto se liber√≥
                if ! lsof -i :$puerto > /dev/null 2>&1; then
                    echo -e "${GREEN}‚úÖ Puerto $puerto liberado correctamente${NC}"
                else
                    echo -e "${RED}‚ùå No se pudo liberar el puerto $puerto${NC}"
                    echo -e "${YELLOW}‚ÑπÔ∏è Puede que necesites permisos de administrador o reiniciar el sistema${NC}"
                    return 1
                fi
            fi
        else
            echo -e "${GREEN}‚úÖ Puerto $puerto est√° disponible${NC}"
        fi
    done
    
    return 0
}

# Funci√≥n para limpiar procesos zombi y recursos
limpiar_procesos() {
    echo -e "${BLUE}üßπ Limpiando procesos y recursos...${NC}"
    
    # Limpiar procesos Node.js zombi
    echo -e "${BLUE}üîÑ Limpiando procesos Node.js zombi...${NC}"
    pkill -f "node.*server.js" 2>/dev/null || true
    pkill -f "npm.*start" 2>/dev/null || true
    
    # Limpiar contenedores detenidos
    echo -e "${BLUE}üóëÔ∏è Limpiando contenedores detenidos...${NC}"
    docker container prune -f 2>/dev/null || true
    
    # Limpiar archivos temporales
    echo -e "${BLUE}üóëÔ∏è Limpiando archivos temporales...${NC}"
    rm -f /tmp/dev-server.log 2>/dev/null || true
    find . -maxdepth 2 -name "*.tmp" -delete 2>/dev/null || true
    find . -maxdepth 2 -name "*.temp" -delete 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ Limpieza completada${NC}"
}

# Funci√≥n para diagn√≥stico completo del sistema
diagnostico_sistema() {
    echo -e "${BLUE}üîç DIAGN√ìSTICO COMPLETO DEL SISTEMA${NC}"
    echo -e "${BLUE}====================================${NC}"
    
    # Verificar Docker
    echo -e "${CYAN}üì¶ Docker:${NC}"
    if docker info &> /dev/null; then
        echo -e "${GREEN}‚úÖ Docker funcionando${NC}"
        docker --version
    else
        echo -e "${RED}‚ùå Docker no funciona${NC}"
    fi
    
    # Verificar puertos
    echo -e "${CYAN}üîå Puertos:${NC}"
    for puerto in 5001 5002 5433 80 443; do
        if lsof -i :$puerto > /dev/null 2>&1; then
            PROCESO=$(lsof -ti :$puerto | xargs ps -p 2>/dev/null | tail -n +2 | awk '{print $4}' | head -1)
            echo -e "${YELLOW}‚ö†Ô∏è Puerto $puerto en uso por: $PROCESO${NC}"
        else
            echo -e "${GREEN}‚úÖ Puerto $puerto libre${NC}"
        fi
    done
    
    # Verificar servicios
    echo -e "${CYAN}üîß Servicios:${NC}"
    if pgrep nginx > /dev/null; then
        echo -e "${GREEN}‚úÖ Nginx corriendo${NC}"
    else
        echo -e "${RED}‚ùå Nginx no est√° corriendo${NC}"
    fi
    
    if docker ps | grep -q postgres; then
        echo -e "${GREEN}‚úÖ PostgreSQL corriendo${NC}"
    else
        echo -e "${RED}‚ùå PostgreSQL no est√° corriendo${NC}"
    fi
    
    # Verificar archivos cr√≠ticos
    echo -e "${CYAN}üìÅ Archivos cr√≠ticos:${NC}"
    archivos_criticos=(".env.production" ".env.development" "docker-compose-no-nginx.yml" "dev-server.sh")
    for archivo in "${archivos_criticos[@]}"; do
        if [ -f "$archivo" ]; then
            echo -e "${GREEN}‚úÖ $archivo existe${NC}"
        else
            echo -e "${RED}‚ùå $archivo falta${NC}"
        fi
    done
    
    # Verificar espacio en disco
    echo -e "${CYAN}üíæ Espacio en disco:${NC}"
    df -h / | tail -1 | awk '{print "Usado: " $3 "/" $2 " (" $5 ")"}'
    
    # Verificar conectividad
    echo -e "${CYAN}üåê Conectividad:${NC}"
    if curl -s -o /dev/null -w "%{http_code}" https://circuitprompt.com.ar | grep -q "200"; then
        echo -e "${GREEN}‚úÖ Sitio web responde correctamente${NC}"
    else
        echo -e "${RED}‚ùå Sitio web no responde${NC}"
    fi
}

# Funci√≥n para recuperaci√≥n autom√°tica de errores
recuperacion_automatica() {
    echo -e "${YELLOW}üîÑ RECUPERACI√ìN AUTOM√ÅTICA DE ERRORES${NC}"
    echo -e "${BLUE}=====================================${NC}"
    
    # Paso 1: Limpiar procesos y recursos
    echo -e "${BLUE}Paso 1: Limpiando procesos y recursos...${NC}"
    limpiar_procesos
    
    # Paso 2: Verificar y liberar puertos
    echo -e "${BLUE}Paso 2: Liberando puertos...${NC}"
    verificar_puertos
    
    # Paso 3: Reiniciar servicios cr√≠ticos
    echo -e "${BLUE}Paso 3: Reiniciando servicios cr√≠ticos...${NC}"
    
    # Reiniciar nginx si no est√° funcionando
    if ! pgrep nginx > /dev/null; then
        echo -e "${YELLOW}üîÑ Reiniciando nginx...${NC}"
        systemctl restart nginx 2>/dev/null || service nginx restart 2>/dev/null || true
    fi
    
    # Paso 4: Verificar Docker
    echo -e "${BLUE}Paso 4: Verificando Docker...${NC}"
    if ! docker info &> /dev/null; then
        echo -e "${YELLOW}üîÑ Intentando iniciar Docker...${NC}"
        systemctl start docker 2>/dev/null || service docker start 2>/dev/null || true
        sleep 5
    fi
    
    # Paso 5: Diagn√≥stico final
    echo -e "${BLUE}Paso 5: Diagn√≥stico final...${NC}"
    diagnostico_sistema
    
    echo -e "${GREEN}‚úÖ Recuperaci√≥n autom√°tica completada${NC}"
}

# Funci√≥n para verificar estado de nginx
verificar_nginx() {
    echo -e "${BLUE}üîç Verificando estado de nginx del sistema...${NC}"
    
    if pgrep nginx > /dev/null; then
        echo -e "${GREEN}‚úÖ Nginx del sistema corriendo${NC}"
        
        # Verificar configuraci√≥n
        if nginx -t &> /dev/null; then
            echo -e "${GREEN}‚úÖ Configuraci√≥n de nginx v√°lida${NC}"
        else
            echo -e "${RED}‚ùå Error en configuraci√≥n de nginx${NC}"
            return 1
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è Nginx del sistema no est√° corriendo${NC}"
        return 1
    fi
    
    return 0
}

# Funci√≥n para iniciar/reiniciar nginx del sistema
iniciar_nginx() {
    echo -e "${BLUE}üöÄ Verificando nginx del sistema...${NC}"
    
    # Verificar si nginx est√° corriendo
    if ! pgrep nginx > /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è Nginx no est√° corriendo, intentando iniciar...${NC}"
        systemctl start nginx || service nginx start
        sleep 3
    fi
    
    # Recargar configuraci√≥n
    echo -e "${BLUE}üîÑ Recargando configuraci√≥n de nginx...${NC}"
    systemctl reload nginx || service nginx reload
    
    sleep 2
    
    if verificar_nginx; then
        echo -e "${GREEN}‚úÖ Nginx del sistema funcionando correctamente${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Error con nginx del sistema${NC}"
        return 1
    fi
}

# Funci√≥n para modo producci√≥n
modo_produccion() {
    echo -e "${GREEN}üè≠ MODO PRODUCCI√ìN${NC}"
    echo -e "${BLUE}Iniciando entorno completo de producci√≥n...${NC}"
    
    verificar_docker || return 1
    verificar_puertos "prod" || return 1
    
    # Limpieza previa
    limpiar_procesos
    
    # Detener contenedores existentes
    echo -e "${BLUE}üõë Deteniendo contenedores existentes...${NC}"
    $DOCKER_COMPOSE --env-file .env.production -f docker-compose-no-nginx.yml down 2>/dev/null || true
    
    # Crear directorios necesarios
    mkdir -p ./data/logs ./data/uploads ./data/postgres
    
    # Asegurar que nginx del sistema est√© funcionando
    if ! verificar_nginx; then
        iniciar_nginx || return 1
    fi
    
    # Iniciar producci√≥n (sin nginx)
    echo -e "${BLUE}üöÄ Iniciando contenedores de producci√≥n...${NC}"
    export NODE_ENV=production
    export PORT=5001
    export DOCKER_BUILDKIT=1
    export COMPOSE_DOCKER_CLI_BUILD=1
    
    $DOCKER_COMPOSE --env-file .env.production -f docker-compose-no-nginx.yml up -d --build
    
    # Esperar que los servicios est√©n listos
    echo -e "${BLUE}‚è≥ Esperando que los servicios est√©n listos...${NC}"
    sleep 15
    
    # Verificar estado
    if $DOCKER_COMPOSE -f docker-compose-no-nginx.yml ps | grep -q "healthy\|running"; then
        echo -e "${GREEN}‚úÖ Modo producci√≥n activo${NC}"
        echo -e "${CYAN}üåê URL: https://circuitprompt.com.ar${NC}"
    else
        echo -e "${RED}‚ùå Error al iniciar producci√≥n${NC}"
        return 1
    fi
}

# Funci√≥n para modo desarrollo
modo_desarrollo() {
    echo -e "${YELLOW}üîß MODO DESARROLLO${NC}"
    echo -e "${BLUE}Iniciando entorno h√≠brido desarrollo...${NC}"
    
    verificar_docker || return 1
    verificar_puertos "dev" || return 1
    
    # Limpieza previa
    limpiar_procesos
    
    # Detener contenedor de aplicaci√≥n de producci√≥n si existe
    echo -e "${YELLOW}üõë Deteniendo contenedor de aplicaci√≥n de producci√≥n...${NC}"
    docker stop $(docker ps -q -f name=app) 2>/dev/null || true
    
    # Asegurar que nginx est√© corriendo
    if ! verificar_nginx; then
        iniciar_nginx || return 1
    fi
    
    # Asegurar que PostgreSQL est√© corriendo
    if ! docker ps | grep -q postgres; then
        echo -e "${BLUE}üóÑÔ∏è Iniciando PostgreSQL...${NC}"
        $DOCKER_COMPOSE --env-file .env.production -f docker-compose-no-nginx.yml up -d postgres
        sleep 10
    fi
    
    # Iniciar servidor de desarrollo
    echo -e "${BLUE}üöÄ Iniciando servidor de desarrollo en puerto 5002...${NC}"
    ./dev-server.sh start
    
    echo -e "${GREEN}‚úÖ Modo desarrollo activo${NC}"
    echo -e "${CYAN}üåê URL: https://circuitprompt.com.ar${NC}"
    echo -e "${YELLOW}‚ÑπÔ∏è  Nginx redirige autom√°ticamente al servidor de desarrollo${NC}"
}

# Funci√≥n para verificar estado
estado_servidor() {
    echo -e "${BLUE}üìä ESTADO DEL SERVIDOR${NC}"
    echo -e "${BLUE}=====================${NC}"
    
    # Verificar nginx
    if pgrep nginx > /dev/null; then
        echo -e "${GREEN}‚úÖ Nginx (Sistema): Activo${NC}"
    else
        echo -e "${RED}‚ùå Nginx (Sistema): Inactivo${NC}"
    fi
    
    # Verificar PostgreSQL
    if docker ps | grep -q postgres; then
        echo -e "${GREEN}‚úÖ PostgreSQL: Activo${NC}"
    else
        echo -e "${RED}‚ùå PostgreSQL: Inactivo${NC}"
    fi
    
    # Verificar aplicaci√≥n de producci√≥n
    if docker ps | grep -q "app.*5001"; then
        echo -e "${GREEN}‚úÖ App Producci√≥n: Activa (puerto 5001)${NC}"
        MODO="PRODUCCI√ìN"
    else
        echo -e "${YELLOW}‚ö†Ô∏è App Producci√≥n: Inactiva${NC}"
    fi
    
    # Verificar servidor de desarrollo
    if pgrep -f "node.*server.js" > /dev/null; then
        echo -e "${GREEN}‚úÖ App Desarrollo: Activa (puerto 5002)${NC}"
        MODO="DESARROLLO"
    else
        echo -e "${YELLOW}‚ö†Ô∏è App Desarrollo: Inactiva${NC}"
    fi
    
    # Mostrar modo actual
    if [ ! -z "$MODO" ]; then
        echo -e "${CYAN}üéØ Modo actual: ${MODO}${NC}"
    else
        echo -e "${RED}‚ùå Ning√∫n servidor de aplicaci√≥n est√° activo${NC}"
    fi
    
    # Verificar conectividad
    echo -e "${BLUE}üåê Verificando conectividad...${NC}"
    if curl -s -k https://circuitprompt.com.ar/health > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Sitio web: Respondiendo correctamente${NC}"
    else
        echo -e "${RED}‚ùå Sitio web: No responde${NC}"
    fi
}

# Funci√≥n para detener todo
detener_todo() {
    echo -e "${RED}üõë DETENIENDO TODOS LOS SERVICIOS${NC}"
    
    # Detener servidor de desarrollo
    echo -e "${YELLOW}Deteniendo servidor de desarrollo...${NC}"
    pkill -f "node.*server.js" || true
    
    # Detener contenedores Docker
    echo -e "${YELLOW}Deteniendo contenedores Docker...${NC}"
    $DOCKER_COMPOSE --env-file .env.production -f docker-compose-no-nginx.yml down 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ Todos los servicios detenidos${NC}"
}

# Funci√≥n para reiniciar nginx
reiniciar_nginx() {
    echo -e "${BLUE}üîÑ REINICIANDO NGINX DEL SISTEMA${NC}"
    
    # Reiniciar nginx del sistema
    systemctl restart nginx || service nginx restart
    
    # Esperar un momento
    sleep 3
    
    # Verificar estado
    if verificar_nginx; then
        echo -e "${GREEN}‚úÖ Nginx del sistema reiniciado${NC}"
    else
        echo -e "${RED}‚ùå Error al reiniciar nginx${NC}"
        return 1
    fi
}

# Funci√≥n para logs
ver_logs() {
    echo -e "${BLUE}üìã LOGS DEL SISTEMA${NC}"
    echo "Selecciona qu√© logs ver:"
    echo "1. Nginx"
    echo "2. Aplicaci√≥n (Producci√≥n)"
    echo "3. Servidor de desarrollo"
    echo "4. PostgreSQL"
    echo "5. Todos los contenedores"
    
    read -p "Opci√≥n (1-5): " log_choice
    
    case $log_choice in
        1) tail -f /var/log/nginx/error.log ;;
        2) docker logs -f $(docker ps -q -f name=app) ;;
        3) tail -f /tmp/dev-server.log ;;
        4) docker logs -f $(docker ps -q -f name=postgres) ;;
        5) docker logs -f $(docker ps -q) ;;
        *) echo -e "${RED}‚ùå Opci√≥n inv√°lida${NC}"; return 1 ;;
    esac
}

# Men√∫ principal
case "${1:-menu}" in
    prod|production)
        modo_produccion
        ;;
    dev|development)
        modo_desarrollo
        ;;
    status|estado)
        estado_servidor
        ;;
    stop|detener)
        detener_todo
        ;;
    restart-nginx)
        reiniciar_nginx
        ;;
    logs)
        ver_logs
        ;;
    diagnostico|diagnosis)
        diagnostico_sistema
        ;;
    fix|recuperar)
        recuperacion_automatica
        ;;
    clean|limpiar)
        limpiar_procesos
        ;;
    menu)
        echo "Opciones disponibles:"
        echo "1. Modo Producci√≥n (completo)"
        echo "2. Modo Desarrollo (h√≠brido)"
        echo "3. Ver estado del servidor"
        echo "4. Detener todos los servicios"
        echo "5. Reiniciar nginx"
        echo "6. Ver logs"
        echo "7. Diagn√≥stico completo"
        echo "8. Recuperaci√≥n autom√°tica"
        echo "9. Limpiar procesos y recursos"
        echo "10. Salir"
        echo ""
        read -p "Selecciona una opci√≥n (1-10): " choice
        
        case $choice in
            1) modo_produccion ;;
            2) modo_desarrollo ;;
            3) estado_servidor ;;
            4) detener_todo ;;
            5) reiniciar_nginx ;;
            6) ver_logs ;;
            7) diagnostico_sistema ;;
            8) recuperacion_automatica ;;
            9) limpiar_procesos ;;
            10) echo -e "${GREEN}üëã ¬°Hasta luego!${NC}"; exit 0 ;;
            *) echo -e "${RED}‚ùå Opci√≥n inv√°lida${NC}"; exit 1 ;;
        esac
        ;;
    *)
        echo -e "${CYAN}========================================${NC}"
        echo -e "${CYAN}   CircuitPrompt Server Manager${NC}"
        echo -e "${CYAN}   Gesti√≥n Robusta y Autom√°tica${NC}"
        echo -e "${CYAN}========================================${NC}"
        echo ""
        echo -e "${GREEN}Uso: $0 {comando}${NC}"
        echo ""
        echo -e "${YELLOW}Comandos principales:${NC}"
        echo -e "${BLUE}  prod, production     ${NC}- Iniciar modo producci√≥n completo"
        echo -e "${BLUE}  dev, development     ${NC}- Iniciar modo desarrollo h√≠brido"
        echo -e "${BLUE}  status, estado       ${NC}- Ver estado detallado del servidor"
        echo ""
        echo -e "${YELLOW}Comandos de gesti√≥n:${NC}"
        echo -e "${BLUE}  stop, detener        ${NC}- Detener todos los servicios"
        echo -e "${BLUE}  restart-nginx        ${NC}- Reiniciar nginx del sistema"
        echo -e "${BLUE}  logs                 ${NC}- Ver logs del sistema"
        echo ""
        echo -e "${YELLOW}Comandos de diagn√≥stico:${NC}"
        echo -e "${BLUE}  diagnostico, diagnosis${NC}- Diagn√≥stico completo del sistema"
        echo -e "${BLUE}  fix, recuperar       ${NC}- Recuperaci√≥n autom√°tica de errores"
        echo -e "${BLUE}  clean, limpiar       ${NC}- Limpiar procesos y recursos"
        echo ""
        echo -e "${YELLOW}Otros:${NC}"
        echo -e "${BLUE}  menu                 ${NC}- Mostrar men√∫ interactivo"
        echo ""
        echo -e "${CYAN}Caracter√≠sticas avanzadas:${NC}"
        echo -e "${GREEN}‚úÖ Detecci√≥n y liberaci√≥n autom√°tica de puertos${NC}"
        echo -e "${GREEN}‚úÖ Limpieza inteligente de procesos zombi${NC}"
        echo -e "${GREEN}‚úÖ Diagn√≥stico completo del sistema${NC}"
        echo -e "${GREEN}‚úÖ Recuperaci√≥n autom√°tica de errores${NC}"
        echo -e "${GREEN}‚úÖ Gesti√≥n robusta de Docker y nginx${NC}"
        echo ""
        echo -e "${YELLOW}Ejemplos:${NC}"
        echo -e "${BLUE}  ./manage-server.sh dev${NC}        - Modo desarrollo"
        echo -e "${BLUE}  ./manage-server.sh prod${NC}       - Modo producci√≥n"
        echo -e "${BLUE}  ./manage-server.sh fix${NC}        - Arreglar problemas"
        echo -e "${BLUE}  ./manage-server.sh diagnostico${NC} - Ver diagn√≥stico"
        echo ""
        echo -e "${CYAN}URL unificada: https://circuitprompt.com.ar${NC}"
        exit 1
        ;;
esac 